{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","toUpperCase","toLowerCase","length","showAlert","navigator","clipboard","writeText","newText","split","join","trim","replace","filter","element","Math","ceil","prototype","PropTypes","string","isRequired","defaultProps","Alert","word","alert","class","charAt","slice","msg","App","setMode","setAlert","document","body","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6cf05db7.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n\n                <h4 className={`text-${props.mode === 'light'?'dark':'light'}`}>{props.title}</h4>\n\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                </ul>\n\n                <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"modeSwitch\"/>\n                    <label className=\"form-check-label\" htmlFor=\"modeSwitch\"> {` ${props.mode === 'light' ? 'Enable':'Disable'} Darkmode`}</label>\n                </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.prototype = {\n    title: PropTypes.string.isRequired,\n}\n\nNavbar.defaultProps = {\n    title: \"Default Title\",\n}","import React, {useState} from 'react'\nimport '../App.css'\n\nexport default function TextForm(props) {\n\n    const handleUpClick = () => {\n        setText(text.toUpperCase())\n    }\n\n    const handleLoClick = () => {\n        setText(text.toLowerCase())\n    }\n\n    const handleOnChange = (event) => {\n        setText(event.target.value)\n    }\n\n    const clearText = () => {\n        setText(\"\")\n    }\n\n    const copyText = () => {\n        if (text.length < 0) props.showAlert(\"Enter some text to copy\", \"warning\")\n        else{\n            navigator.clipboard.writeText(text)\n            props.showAlert(\"Data copied to clipboard\", \"success\")    \n        }\n    }\n\n    const removeExtraSpace = () => {\n        let newText = text.split(/[ ]+/)\n        setText(newText.join(\" \"))\n    }\n\n    const removeNewLines = () => setText(text.trim().replace( /\\n/g, \" \" ))\n\n    const [text, setText] = useState(\"\")\n    \n    return (\n        <>\n            <div className=\"container mb-3 mt-4\" style={{color: props.mode === 'light'?'#042743':'white'}}>\n                <h1>{props.heading}</h1>\n                <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} rows=\"8\"\n                style={{backgroundColor: props.mode === 'light'?'white':'grey', color: props.mode === 'light'?'#042743':'white'}} ></textarea>\n                <button className=\"btn btn-primary mt-3 mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n                <button className=\"btn btn-primary mt-3 mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n                <button className=\"btn btn-primary mt-3 mx-1\" onClick={copyText}>Copy Text</button>\n                <button className=\"btn btn-primary mt-3 mx-1\" onClick={removeExtraSpace}>Remove Extra spaces</button>\n                <button className=\"btn btn-primary mt-3 mx-1\" onClick={removeNewLines}>Remove New lines</button>\n                <button className=\"btn btn-primary mt-3 mx-1\" onClick={clearText}>Clear Text</button>\n            </div>\n            <div className=\"container mb-3\" style={{color: props.mode === 'light'?'#042743':'white'}}>\n                <h2>Your Text Summary</h2>\n\n                <p>{((text.trim().replace( /\\n/g, \" \" ).split(\" \")).filter( element => element !== \"\" )).length} words \n                and {text.length} characters </p>\n\n                <p> { text.length > 0 ? Math.ceil(text.trim().split(' ').length * 0.008) : 0} minute(s) read </p>\n                <h2>Preview</h2>\n                <p>{text.length > 0 ? text : \"Enter something to preview\"}</p>\n\n            </div>  \n        </>\n    )\n}","import React from 'react'\n\nfunction Alert(props) {\n\n    const capitalize = word => word.charAt(0).toUpperCase() + word.slice(1)\n    \n    return (\n        props.alert && \n        <div className=\"container\">\n            <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}</strong>:  {props.alert.msg}\n                {/*<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>*/}\n            </div>\n        </div>\n    )\n}\n\nexport default Alert","import './App.css'\nimport {useState} from 'react'\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\nimport Alert from './components/Alert'\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const toggleMode = () => {\n    document.body.style.backgroundColor = (mode === 'light') ? '#042743' : 'white'\n    document.title = mode === 'light' ? \"TextForge - Home Dark\" : \"TextForge - Home\"\n    setMode((mode === 'light') ? 'dark' : 'light')\n\n    // blinking the title to gain attention\n    // setInterval(() => {\n    //   document.title = \"Install this\";\n    // }, 1500);\n    // setInterval(() => {\n    //   document.title = \"You have a virus\";\n    // }, 2000);\n\n    // I don't wanna show alert here\n    // showAlert( ((mode === 'light') ? \"Light \" : \"Dark \") + \"mode enabled\", \"success\");\n  }\n\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  return (\n    <>  \n        <Navbar title=\"TextForge\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert} /> \n        <div className=\"container\">\n            <TextForm heading=\"Enter text to modify\" mode={mode} showAlert={showAlert} />\n        </div>\n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}